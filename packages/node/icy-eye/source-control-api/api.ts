/* tslint:disable */
/* eslint-disable */
/**
 * Source Control Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Error response schema.
 * @export
 * @interface ErrorResult
 */
export interface ErrorResult {
    /**
     * Error code indicating the type of failure.
     * @type {string}
     * @memberof ErrorResult
     */
    code: string;
    /**
     * Additional information about the error, if available.
     * @type {any}
     * @memberof ErrorResult
     */
    details?: any | null;
    /**
     * HTTP status code associated with the error.
     * @type {number}
     * @memberof ErrorResult
     */
    status: number;
}
/**
 * A Git source code repository.
 * @export
 * @interface GitRepository
 */
export interface GitRepository {
    /**
     * 
     * @type {string}
     * @memberof GitRepository
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GitRepository
     */
    repositoryType: RepositoryTypeEnum;
    /**
     * URL for this repository.
     * @type {string}
     * @memberof GitRepository
     */
    url: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RepositoryTypeEnum {
    Git = 'git'
}

/**
 * Details for an array of source code repositories.
 * @export
 * @interface RepositoryArrayResponse
 */
export interface RepositoryArrayResponse {
    /**
     * 
     * @type {Array<SourceCodeRepository>}
     * @memberof RepositoryArrayResponse
     */
    data: Array<SourceCodeRepository>;
}
/**
 * @type SourceCodeRepository
 * @export
 */
export type SourceCodeRepository = GitRepository;


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a list of all source code repositories known to the system.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories: async (body?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/repositories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a list of all source code repositories known to the system.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepositories(body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryArrayResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRepositories(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves a list of all source code repositories known to the system.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories(body?: object, options?: any): AxiosPromise<RepositoryArrayResponse> {
            return DefaultApiFp(configuration).getRepositories(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Retrieves a list of all source code repositories known to the system.
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRepositories(body?: object, options?: any): AxiosPromise<RepositoryArrayResponse>;

}

/**
 * Request parameters for getRepositories operation in DefaultApi.
 * @export
 * @interface DefaultApiGetRepositoriesRequest
 */
export interface DefaultApiGetRepositoriesRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiGetRepositories
     */
    readonly body?: object
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Retrieves a list of all source code repositories known to the system.
     * @param {DefaultApiGetRepositoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRepositories(requestParameters: DefaultApiGetRepositoriesRequest = {}, options?: any) {
        return DefaultApiFp(this.configuration).getRepositories(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


