diff --git a/node_modules/metro-memory-fs/src/index.js b/node_modules/metro-memory-fs/src/index.js
index ddc8906..1ac4375 100644
--- a/node_modules/metro-memory-fs/src/index.js
+++ b/node_modules/metro-memory-fs/src/index.js
@@ -440,23 +440,90 @@ class MemoryFs {
       }
     });
 
-    _defineProperty(this, "mkdirSync", (dirPath, mode) => {
-      if (mode == null) {
-        mode = 0o777;
+    _defineProperty(this, "mkdirSync", (dirPath, modeOrOptions) => {
+      const getParentPath = (dirPath) => {
+        return dirPath
+          .split(this._pathSep)
+          .slice(0, -1)
+          .join(this._pathSep)
       }
 
-      dirPath = pathStr(dirPath);
+      const mkdirSync = (dirPath, mode) => {
+        if (mode == null) {
+          mode = 0o777;
+        }
 
-      const _this$_resolve3 = this._resolve(dirPath),
-        dirNode = _this$_resolve3.dirNode,
-        node = _this$_resolve3.node,
-        basename = _this$_resolve3.basename;
+        dirPath = pathStr(dirPath);
 
-      if (node != null) {
-        throw makeError("EEXIST", dirPath, "directory or file already exists");
+        const _this$_resolve3 = this._resolve(dirPath),
+          dirNode = _this$_resolve3.dirNode,
+          node = _this$_resolve3.node,
+          basename = _this$_resolve3.basename;
+
+        if (node != null) {
+          throw makeError("EEXIST", dirPath, "directory or file already exists");
+        }
+
+        dirNode.entries.set(basename, this._makeDir(mode));
+      }
+
+      const mkdirSyncRecursive = (dirPath, mode) => {
+        if (mode == null) {
+          mode = 0o777;
+        }
+
+        try {
+          mkdirSync(dirPath, mode)
+        } catch (error) {
+          switch (error.code) {
+            case 'ENOENT':
+              const parentPath = getParentPath(dirPath)
+              mkdirSyncRecursive(parentPath, mode)
+              mkdirSyncRecursive(dirPath, mode)
+              break
+
+            case 'EEXIST':
+              let stat
+              try {
+                stat = this.statSync(dirPath)
+              } catch (syncError) {
+                // cannot determine file type, throw error
+                throw error
+              }
+
+              if (!stat.isDirectory()) {
+                // path exists, but isn't a directory - throw EEXIST
+                throw error
+              }
+              
+              // directory already exists, ignore error
+              break
+
+            default:
+              // rethrow any other error type
+              throw error
+          }
+        }
+      }
+
+      var mode
+      var recursive = false
+      if (typeof modeOrOptions === "object") {
+        mode = modeOrOptions.mode
+        recursive = modeOrOptions.recursive
+      } else {
+        mode = modeOrOptions
+      }
+
+      if (mode == null) {
+        mode = 0o777;
       }
 
-      dirNode.entries.set(basename, this._makeDir(mode));
+      if (recursive) {
+        mkdirSyncRecursive(dirPath, mode)
+      } else {
+        mkdirSync(dirPath, mode)
+      }
     });
 
     _defineProperty(this, "rmdirSync", dirPath => {
@@ -777,7 +844,12 @@ class MemoryFs {
     if (this._platform === "posix") {
       this._roots.set("", this._makeDir(0o777));
     } else if (this._platform === "win32") {
-      this._roots.set("C:", this._makeDir(0o777));
+      // iterate over all drive letters, A-Z and create a root
+      // this fixes errors if a particular environment requires fs operations on a driver other than C:
+      for (var i = 0; i < 26; i++) {
+        const driveLetter = String.fromCharCode(65 + i)
+        this._roots.set(`${driveLetter}:`, this._makeDir(0o777))
+      }
     }
 
     this._fds = new Map();
