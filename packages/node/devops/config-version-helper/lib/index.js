"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfigVersionVariables = void 0;

var _fp = require("lodash/fp");

var _fp2 = require("@thrashplay/fp");

var _helpers = require("./helpers");

var defaults = _interopRequireWildcard(require("./defaults"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Calculates a set of version strings for all `config` entries in the specified stack that have a 'file'
 * property set.
 * 
 * The return value of this function will contain a `ConfigVersionVariable` for each valid fild config found,
 * and a set of invalid `ConfigEntry` objects containing all file configs for which content was unavailable. The 
 * variable name for each property will be generated by calling the `getVariableName` function on the supplied
 * `ConfigVersionVariableOptions`. The property value will be the version string for the contents of that config. 
 * This version string uniquely identifies the config version, and can be used to generate the unique config key 
 * names required by Docker Swarm Mode.
 * 
 * The contents of a config are determined by passing the config's path (the 'file' value from the Stack
 * definition) to the 'getConfigContent' function set on the options.
 * 
 * @param stack an object representing the Stack Yaml definition
 * @param options the version variable creation options to use
 * @return a map of config version variable names to version strings
 */
const getConfigVersionVariables = (stack = {}, {
  getConfigContent = configEntry => configEntry.path,
  getVariableName = defaults.getVariableName,
  getVersion = defaults.getVersion
} = {}) => {
  const isValid = (0, _fp.negate)((0, _fp.has)('error'));
  return (0, _fp.flow)(_helpers.getFileConfigsFromStack, (0, _fp.map)((0, _helpers.addContent)(getConfigContent)), (0, _fp2.mapIf)(isValid, (0, _helpers.calculateVersion)(getVersion)), (0, _helpers.createResult)(getVariableName))(stack);
};

exports.getConfigVersionVariables = getConfigVersionVariables;