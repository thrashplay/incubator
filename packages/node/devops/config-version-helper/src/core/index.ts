import { flow, map, has, negate } from 'lodash/fp'
import { mapIf } from '@thrashplay/fp'

import * as defaults from '../defaults'
import {
  StackDefinition,
  ContentReader,
  VersionGetter,
  VariableNameCreator,
  ConfigVersionsResult,
} from '../types'

import {
  addContent, 
  calculateVersion,
  createResult,
  getFileConfigsFromStack,
} from './helpers'

/**
 * Options for controlling how version variables are created for a stack's `config` entries.
 */
export interface ConfigVersionVariableOptions {
  /**
   * Content loader to use for retrieving config content for a path string. By default, the
   * path will be returned unchanged -- which is probably not what you want.
   */
  getConfigContent?: ContentReader

  /**
   * Gets the variable name for a `ConfigEntry`. Defaults to `<id>_VERSION`, where `<id>` is the
   * fully capitalized reprsentation of the ID string for the config entry, after converting the ID
   * to snake case.
   */
  getVariableName?: VariableNameCreator

  /**
   * Gets the version string for the specified config entry. By default, this will calculate
   * the SHA256 hash of the content, and return the first 8 hex bytes of the result.
   */
  getVersion?: VersionGetter
}

/**
 * Calculates a set of version strings for all `config` entries in the specified stack that have a 'file'
 * property set.
 * 
 * The return value of this function will contain a `ConfigVersionVariable` for each valid fild config found,
 * and a set of invalid `ConfigEntry` objects containing all file configs for which content was unavailable. The 
 * variable name for each property will be generated by calling the `getVariableName` function on the supplied
 * `ConfigVersionVariableOptions`. The property value will be the version string for the contents of that config. 
 * This version string uniquely identifies the config version, and can be used to generate the unique config key 
 * names required by Docker Swarm Mode.
 * 
 * The contents of a config are determined by passing the config's path (the 'file' value from the Stack
 * definition) to the 'getConfigContent' function set on the options.
 * 
 * @param stack an object representing the Stack Yaml definition
 * @param options the version variable creation options to use
 * @return a map of config version variable names to version strings
 */
export const getConfigVersionVariables = (
  stack: StackDefinition = {},
  { 
    getConfigContent = (configEntry) => configEntry.path,
    getVariableName = defaults.getVariableName,
    getVersion = defaults.getVersion,
  }: ConfigVersionVariableOptions = {},
) => {
  const isValid = negate(has('error'))

  return flow(
    getFileConfigsFromStack,
    map(addContent(getConfigContent)),
    mapIf(isValid, calculateVersion(getVersion)),
    createResult(getVariableName),
  )(stack) as ConfigVersionsResult
}

